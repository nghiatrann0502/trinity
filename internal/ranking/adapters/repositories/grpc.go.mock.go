// Code generated by MockGen. DO NOT EDIT.
// Source: internal/ranking/core/ports/video_repository.go
//
// Generated by this command:
//
//	mockgen --source=internal/ranking/core/ports/video_repository.go --destination=internal/ranking/adapters/repositories/grpc.go.mock.go -package=repositories
//

// Package repositories is a generated GoMock package.
package repositories

import (
	context "context"
	reflect "reflect"

	domain "github.com/nghiatrann0502/trinity/internal/ranking/core/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockVideoRepository is a mock of VideoRepository interface.
type MockVideoRepository struct {
	ctrl     *gomock.Controller
	recorder *MockVideoRepositoryMockRecorder
	isgomock struct{}
}

// MockVideoRepositoryMockRecorder is the mock recorder for MockVideoRepository.
type MockVideoRepositoryMockRecorder struct {
	mock *MockVideoRepository
}

// NewMockVideoRepository creates a new mock instance.
func NewMockVideoRepository(ctrl *gomock.Controller) *MockVideoRepository {
	mock := &MockVideoRepository{ctrl: ctrl}
	mock.recorder = &MockVideoRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVideoRepository) EXPECT() *MockVideoRepositoryMockRecorder {
	return m.recorder
}

// GetByID mocks base method.
func (m *MockVideoRepository) GetByID(ctx context.Context, id int) (*domain.VideoDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*domain.VideoDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockVideoRepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockVideoRepository)(nil).GetByID), ctx, id)
}

// GetByIDs mocks base method.
func (m *MockVideoRepository) GetByIDs(ctx context.Context, ids []int) ([]domain.VideoDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIDs", ctx, ids)
	ret0, _ := ret[0].([]domain.VideoDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDs indicates an expected call of GetByIDs.
func (mr *MockVideoRepositoryMockRecorder) GetByIDs(ctx, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDs", reflect.TypeOf((*MockVideoRepository)(nil).GetByIDs), ctx, ids)
}
