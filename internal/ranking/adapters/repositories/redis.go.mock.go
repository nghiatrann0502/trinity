// Code generated by MockGen. DO NOT EDIT.
// Source: internal/ranking/core/ports/cache_repository.go
//
// Generated by this command:
//
//	mockgen --source=internal/ranking/core/ports/cache_repository.go --destination=internal/ranking/adapters/repositories/redis.go.mock.go -package=repositories
//

// Package repositories is a generated GoMock package.
package repositories

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCacheRepository is a mock of CacheRepository interface.
type MockCacheRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCacheRepositoryMockRecorder
	isgomock struct{}
}

// MockCacheRepositoryMockRecorder is the mock recorder for MockCacheRepository.
type MockCacheRepositoryMockRecorder struct {
	mock *MockCacheRepository
}

// NewMockCacheRepository creates a new mock instance.
func NewMockCacheRepository(ctrl *gomock.Controller) *MockCacheRepository {
	mock := &MockCacheRepository{ctrl: ctrl}
	mock.recorder = &MockCacheRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheRepository) EXPECT() *MockCacheRepositoryMockRecorder {
	return m.recorder
}

// CheckExistKey mocks base method.
func (m *MockCacheRepository) CheckExistKey(ctx context.Context, key string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckExistKey", ctx, key)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckExistKey indicates an expected call of CheckExistKey.
func (mr *MockCacheRepositoryMockRecorder) CheckExistKey(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckExistKey", reflect.TypeOf((*MockCacheRepository)(nil).CheckExistKey), ctx, key)
}

// CreateNewRankingKey mocks base method.
func (m *MockCacheRepository) CreateNewRankingKey(ctx context.Context, videoID int, value float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewRankingKey", ctx, videoID, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNewRankingKey indicates an expected call of CreateNewRankingKey.
func (mr *MockCacheRepositoryMockRecorder) CreateNewRankingKey(ctx, videoID, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewRankingKey", reflect.TypeOf((*MockCacheRepository)(nil).CreateNewRankingKey), ctx, videoID, value)
}

// GetTopRankedVideos mocks base method.
func (m *MockCacheRepository) GetTopRankedVideos(ctx context.Context, page, limit int) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopRankedVideos", ctx, page, limit)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopRankedVideos indicates an expected call of GetTopRankedVideos.
func (mr *MockCacheRepositoryMockRecorder) GetTopRankedVideos(ctx, page, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopRankedVideos", reflect.TypeOf((*MockCacheRepository)(nil).GetTopRankedVideos), ctx, page, limit)
}

// IncreaseVideoScore mocks base method.
func (m *MockCacheRepository) IncreaseVideoScore(ctx context.Context, videoID int, value float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncreaseVideoScore", ctx, videoID, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncreaseVideoScore indicates an expected call of IncreaseVideoScore.
func (mr *MockCacheRepositoryMockRecorder) IncreaseVideoScore(ctx, videoID, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncreaseVideoScore", reflect.TypeOf((*MockCacheRepository)(nil).IncreaseVideoScore), ctx, videoID, value)
}
